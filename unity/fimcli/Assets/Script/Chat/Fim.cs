// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fim.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Forevernine.Midplat.Proto {

  /// <summary>Holder for reflection information generated from fim.proto</summary>
  public static partial class FimReflection {

    #region Descriptor
    /// <summary>File descriptor for fim.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FimReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglmaW0ucHJvdG8SGWZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8aGWF1dG9n",
            "ZW5fYmFzZV9wYWNrZXQucHJvdG8aFW1pZF9iYXNlX3N0cnVjdC5wcm90bxoU",
            "bWlkX2NsaV9zdHJ1Y3QucHJvdG8iMwoKRklNUmVxQmFzZRIQCghQbGF0Zm9y",
            "bRgBIAEoCRITCgtBY2Nlc3NUb2tlbhgCIAEoCSJTCg9GSU1FbnRlclJvb21S",
            "ZXESMwoEQmFzZRgBIAEoCzIlLmZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8u",
            "RklNUmVxQmFzZRILCgNSSUQYAiABKAkiiAEKD0ZJTUVudGVyUm9vbVJzcBIw",
            "CgRIZWFkGAEgASgLMiIuZm9yZXZlcm5pbmUubWlkcGxhdC5wcm90by5Sc3BI",
            "ZWFkEgsKA1JJRBgCIAEoCRI2CgdNc2dMaXN0GAMgAygLMiUuZm9yZXZlcm5p",
            "bmUubWlkcGxhdC5wcm90by5GSU1DaGF0TXNnIlMKD0ZJTUxlYXZlUm9vbVJl",
            "cRIzCgRCYXNlGAEgASgLMiUuZm9yZXZlcm5pbmUubWlkcGxhdC5wcm90by5G",
            "SU1SZXFCYXNlEgsKA1JJRBgCIAEoCSJQCg9GSU1MZWF2ZVJvb21Sc3ASMAoE",
            "SGVhZBgBIAEoCzIiLmZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8uUnNwSGVh",
            "ZBILCgNSSUQYAiABKAkieAoNRklNU2VuZE1zZ1JlcRIzCgRCYXNlGAEgASgL",
            "MiUuZm9yZXZlcm5pbmUubWlkcGxhdC5wcm90by5GSU1SZXFCYXNlEjIKA01z",
            "ZxgCIAEoCzIlLmZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8uRklNQ2hhdE1z",
            "ZyJ1Cg1GSU1TZW5kTXNnUnNwEjAKBEhlYWQYASABKAsyIi5mb3JldmVybmlu",
            "ZS5taWRwbGF0LnByb3RvLlJzcEhlYWQSMgoDTXNnGAIgASgLMiUuZm9yZXZl",
            "cm5pbmUubWlkcGxhdC5wcm90by5GSU1DaGF0TXNnIlUKDUZJTVJlY3ZNc2dS",
            "ZXESEAoIUGxhdGZvcm0YASABKAkSMgoDTXNnGAIgASgLMiUuZm9yZXZlcm5p",
            "bmUubWlkcGxhdC5wcm90by5GSU1DaGF0TXNnInwKEEZJTVJlY3ZNc2dQYWNr",
            "ZXQSMAoESGVhZBgBIAEoCzIiLmZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8u",
            "UnNwSGVhZBI2CgdNc2dMaXN0GAIgAygLMiUuZm9yZXZlcm5pbmUubWlkcGxh",
            "dC5wcm90by5GSU1DaGF0TXNnIkIKC0ZJTUxvZ2luUmVxEjMKBEJhc2UYASAB",
            "KAsyJS5mb3JldmVybmluZS5taWRwbGF0LnByb3RvLkZJTVJlcUJhc2UidwoL",
            "RklNTG9naW5Sc3ASMAoESGVhZBgBIAEoCzIiLmZvcmV2ZXJuaW5lLm1pZHBs",
            "YXQucHJvdG8uUnNwSGVhZBI2CgdNc2dMaXN0GAIgAygLMiUuZm9yZXZlcm5p",
            "bmUubWlkcGxhdC5wcm90by5GSU1DaGF0TXNnIn0KD0ZJTUhlYXJ0QmVhdFJl",
            "cRIzCgRCYXNlGAEgASgLMiUuZm9yZXZlcm5pbmUubWlkcGxhdC5wcm90by5G",
            "SU1SZXFCYXNlEjUKB0Fja0xpc3QYAiADKAsyJC5mb3JldmVybmluZS5taWRw",
            "bGF0LnByb3RvLkZJTU1zZ0FjayJ7Cg9GSU1IZWFydEJlYXRSc3ASMAoESGVh",
            "ZBgBIAEoCzIiLmZvcmV2ZXJuaW5lLm1pZHBsYXQucHJvdG8uUnNwSGVhZBI2",
            "CgdNc2dMaXN0GAIgAygLMiUuZm9yZXZlcm5pbmUubWlkcGxhdC5wcm90by5G",
            "SU1DaGF0TXNnIi0KDEZJTUxvZ291dFJlcRIQCghQbGF0Zm9ybRgBIAEoCRIL",
            "CgNVSUQYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Forevernine.Midplat.Proto.AutogenBasePacketReflection.Descriptor, global::Forevernine.Midplat.Proto.MidBaseStructReflection.Descriptor, global::Forevernine.Midplat.Proto.MidCliStructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMReqBase), global::Forevernine.Midplat.Proto.FIMReqBase.Parser, new[]{ "Platform", "AccessToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMEnterRoomReq), global::Forevernine.Midplat.Proto.FIMEnterRoomReq.Parser, new[]{ "Base", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMEnterRoomRsp), global::Forevernine.Midplat.Proto.FIMEnterRoomRsp.Parser, new[]{ "Head", "RID", "MsgList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMLeaveRoomReq), global::Forevernine.Midplat.Proto.FIMLeaveRoomReq.Parser, new[]{ "Base", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMLeaveRoomRsp), global::Forevernine.Midplat.Proto.FIMLeaveRoomRsp.Parser, new[]{ "Head", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMSendMsgReq), global::Forevernine.Midplat.Proto.FIMSendMsgReq.Parser, new[]{ "Base", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMSendMsgRsp), global::Forevernine.Midplat.Proto.FIMSendMsgRsp.Parser, new[]{ "Head", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMRecvMsgReq), global::Forevernine.Midplat.Proto.FIMRecvMsgReq.Parser, new[]{ "Platform", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMRecvMsgPacket), global::Forevernine.Midplat.Proto.FIMRecvMsgPacket.Parser, new[]{ "Head", "MsgList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMLoginReq), global::Forevernine.Midplat.Proto.FIMLoginReq.Parser, new[]{ "Base" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMLoginRsp), global::Forevernine.Midplat.Proto.FIMLoginRsp.Parser, new[]{ "Head", "MsgList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMHeartBeatReq), global::Forevernine.Midplat.Proto.FIMHeartBeatReq.Parser, new[]{ "Base", "AckList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMHeartBeatRsp), global::Forevernine.Midplat.Proto.FIMHeartBeatRsp.Parser, new[]{ "Head", "MsgList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMLogoutReq), global::Forevernine.Midplat.Proto.FIMLogoutReq.Parser, new[]{ "Platform", "UID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FIMReqBase : pb::IMessage<FIMReqBase> {
    private static readonly pb::MessageParser<FIMReqBase> _parser = new pb::MessageParser<FIMReqBase>(() => new FIMReqBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMReqBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMReqBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMReqBase(FIMReqBase other) : this() {
      platform_ = other.platform_;
      accessToken_ = other.accessToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMReqBase Clone() {
      return new FIMReqBase(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMReqBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMReqBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (AccessToken != other.AccessToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMReqBase other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMEnterRoomReq : pb::IMessage<FIMEnterRoomReq> {
    private static readonly pb::MessageParser<FIMEnterRoomReq> _parser = new pb::MessageParser<FIMEnterRoomReq>(() => new FIMEnterRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMEnterRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomReq(FIMEnterRoomReq other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomReq Clone() {
      return new FIMEnterRoomReq(this);
    }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FIMReqBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMReqBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 2;
    private string rID_ = "";
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RID {
      get { return rID_; }
      set {
        rID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMEnterRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMEnterRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (RID.Length != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (RID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (RID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMEnterRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.RID.Length != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            RID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMEnterRoomRsp : pb::IMessage<FIMEnterRoomRsp> {
    private static readonly pb::MessageParser<FIMEnterRoomRsp> _parser = new pb::MessageParser<FIMEnterRoomRsp>(() => new FIMEnterRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMEnterRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomRsp(FIMEnterRoomRsp other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      rID_ = other.rID_;
      msgList_ = other.msgList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMEnterRoomRsp Clone() {
      return new FIMEnterRoomRsp(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 2;
    private string rID_ = "";
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RID {
      get { return rID_; }
      set {
        rID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MsgList" field.</summary>
    public const int MsgListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Forevernine.Midplat.Proto.FIMChatMsg> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(26, global::Forevernine.Midplat.Proto.FIMChatMsg.Parser);
    private readonly pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> msgList_ = new pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> MsgList {
      get { return msgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMEnterRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMEnterRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (RID != other.RID) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (RID.Length != 0) hash ^= RID.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (RID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RID);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (RID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RID);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMEnterRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.RID.Length != 0) {
        RID = other.RID;
      }
      msgList_.Add(other.msgList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            RID = input.ReadString();
            break;
          }
          case 26: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMLeaveRoomReq : pb::IMessage<FIMLeaveRoomReq> {
    private static readonly pb::MessageParser<FIMLeaveRoomReq> _parser = new pb::MessageParser<FIMLeaveRoomReq>(() => new FIMLeaveRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMLeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomReq(FIMLeaveRoomReq other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomReq Clone() {
      return new FIMLeaveRoomReq(this);
    }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FIMReqBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMReqBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 2;
    private string rID_ = "";
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RID {
      get { return rID_; }
      set {
        rID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMLeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMLeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (RID.Length != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (RID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (RID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMLeaveRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.RID.Length != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            RID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMLeaveRoomRsp : pb::IMessage<FIMLeaveRoomRsp> {
    private static readonly pb::MessageParser<FIMLeaveRoomRsp> _parser = new pb::MessageParser<FIMLeaveRoomRsp>(() => new FIMLeaveRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMLeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomRsp(FIMLeaveRoomRsp other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLeaveRoomRsp Clone() {
      return new FIMLeaveRoomRsp(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 2;
    private string rID_ = "";
    /// <summary>
    /// room id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RID {
      get { return rID_; }
      set {
        rID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMLeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMLeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (RID.Length != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (RID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (RID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMLeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.RID.Length != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            RID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMSendMsgReq : pb::IMessage<FIMSendMsgReq> {
    private static readonly pb::MessageParser<FIMSendMsgReq> _parser = new pb::MessageParser<FIMSendMsgReq>(() => new FIMSendMsgReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMSendMsgReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgReq(FIMSendMsgReq other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgReq Clone() {
      return new FIMSendMsgReq(this);
    }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FIMReqBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMReqBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "Msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private global::Forevernine.Midplat.Proto.FIMChatMsg msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMChatMsg Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMSendMsgReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMSendMsgReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (msg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMSendMsgReq other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            if (msg_ == null) {
              Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMSendMsgRsp : pb::IMessage<FIMSendMsgRsp> {
    private static readonly pb::MessageParser<FIMSendMsgRsp> _parser = new pb::MessageParser<FIMSendMsgRsp>(() => new FIMSendMsgRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMSendMsgRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgRsp(FIMSendMsgRsp other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMSendMsgRsp Clone() {
      return new FIMSendMsgRsp(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "Msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private global::Forevernine.Midplat.Proto.FIMChatMsg msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMChatMsg Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMSendMsgRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMSendMsgRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      if (msg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMSendMsgRsp other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            if (msg_ == null) {
              Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///内部包
  /// </summary>
  public sealed partial class FIMRecvMsgReq : pb::IMessage<FIMRecvMsgReq> {
    private static readonly pb::MessageParser<FIMRecvMsgReq> _parser = new pb::MessageParser<FIMRecvMsgReq>(() => new FIMRecvMsgReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMRecvMsgReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgReq(FIMRecvMsgReq other) : this() {
      platform_ = other.platform_;
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgReq Clone() {
      return new FIMRecvMsgReq(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private global::Forevernine.Midplat.Proto.FIMChatMsg msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMChatMsg Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMRecvMsgReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMRecvMsgReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (msg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMRecvMsgReq other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            if (msg_ == null) {
              Msg = new global::Forevernine.Midplat.Proto.FIMChatMsg();
            }
            input.ReadMessage(Msg);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMRecvMsgPacket : pb::IMessage<FIMRecvMsgPacket> {
    private static readonly pb::MessageParser<FIMRecvMsgPacket> _parser = new pb::MessageParser<FIMRecvMsgPacket>(() => new FIMRecvMsgPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMRecvMsgPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgPacket(FIMRecvMsgPacket other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      msgList_ = other.msgList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMRecvMsgPacket Clone() {
      return new FIMRecvMsgPacket(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "MsgList" field.</summary>
    public const int MsgListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Forevernine.Midplat.Proto.FIMChatMsg> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(18, global::Forevernine.Midplat.Proto.FIMChatMsg.Parser);
    private readonly pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> msgList_ = new pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> MsgList {
      get { return msgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMRecvMsgPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMRecvMsgPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMRecvMsgPacket other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      msgList_.Add(other.msgList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMLoginReq : pb::IMessage<FIMLoginReq> {
    private static readonly pb::MessageParser<FIMLoginReq> _parser = new pb::MessageParser<FIMLoginReq>(() => new FIMLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginReq(FIMLoginReq other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginReq Clone() {
      return new FIMLoginReq(this);
    }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FIMReqBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMReqBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
        }
        Base.MergeFrom(other.Base);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
            }
            input.ReadMessage(Base);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMLoginRsp : pb::IMessage<FIMLoginRsp> {
    private static readonly pb::MessageParser<FIMLoginRsp> _parser = new pb::MessageParser<FIMLoginRsp>(() => new FIMLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginRsp(FIMLoginRsp other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      msgList_ = other.msgList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLoginRsp Clone() {
      return new FIMLoginRsp(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "MsgList" field.</summary>
    public const int MsgListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Forevernine.Midplat.Proto.FIMChatMsg> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(18, global::Forevernine.Midplat.Proto.FIMChatMsg.Parser);
    private readonly pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> msgList_ = new pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> MsgList {
      get { return msgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMLoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      msgList_.Add(other.msgList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMHeartBeatReq : pb::IMessage<FIMHeartBeatReq> {
    private static readonly pb::MessageParser<FIMHeartBeatReq> _parser = new pb::MessageParser<FIMHeartBeatReq>(() => new FIMHeartBeatReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMHeartBeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatReq(FIMHeartBeatReq other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      ackList_ = other.ackList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatReq Clone() {
      return new FIMHeartBeatReq(this);
    }

    /// <summary>Field number for the "Base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FIMReqBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FIMReqBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "AckList" field.</summary>
    public const int AckListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Forevernine.Midplat.Proto.FIMMsgAck> _repeated_ackList_codec
        = pb::FieldCodec.ForMessage(18, global::Forevernine.Midplat.Proto.FIMMsgAck.Parser);
    private readonly pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMMsgAck> ackList_ = new pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMMsgAck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMMsgAck> AckList {
      get { return ackList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMHeartBeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMHeartBeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!ackList_.Equals(other.ackList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= ackList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      ackList_.WriteTo(output, _repeated_ackList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += ackList_.CalculateSize(_repeated_ackList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMHeartBeatReq other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
        }
        Base.MergeFrom(other.Base);
      }
      ackList_.Add(other.ackList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Forevernine.Midplat.Proto.FIMReqBase();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18: {
            ackList_.AddEntriesFrom(input, _repeated_ackList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMHeartBeatRsp : pb::IMessage<FIMHeartBeatRsp> {
    private static readonly pb::MessageParser<FIMHeartBeatRsp> _parser = new pb::MessageParser<FIMHeartBeatRsp>(() => new FIMHeartBeatRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMHeartBeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatRsp(FIMHeartBeatRsp other) : this() {
      head_ = other.head_ != null ? other.head_.Clone() : null;
      msgList_ = other.msgList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMHeartBeatRsp Clone() {
      return new FIMHeartBeatRsp(this);
    }

    /// <summary>Field number for the "Head" field.</summary>
    public const int HeadFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.RspHead head_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.RspHead Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "MsgList" field.</summary>
    public const int MsgListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Forevernine.Midplat.Proto.FIMChatMsg> _repeated_msgList_codec
        = pb::FieldCodec.ForMessage(18, global::Forevernine.Midplat.Proto.FIMChatMsg.Parser);
    private readonly pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> msgList_ = new pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Forevernine.Midplat.Proto.FIMChatMsg> MsgList {
      get { return msgList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMHeartBeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMHeartBeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Head, other.Head)) return false;
      if(!msgList_.Equals(other.msgList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (head_ != null) hash ^= Head.GetHashCode();
      hash ^= msgList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (head_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Head);
      }
      msgList_.WriteTo(output, _repeated_msgList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (head_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Head);
      }
      size += msgList_.CalculateSize(_repeated_msgList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMHeartBeatRsp other) {
      if (other == null) {
        return;
      }
      if (other.head_ != null) {
        if (head_ == null) {
          Head = new global::Forevernine.Midplat.Proto.RspHead();
        }
        Head.MergeFrom(other.Head);
      }
      msgList_.Add(other.msgList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (head_ == null) {
              Head = new global::Forevernine.Midplat.Proto.RspHead();
            }
            input.ReadMessage(Head);
            break;
          }
          case 18: {
            msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIMLogoutReq : pb::IMessage<FIMLogoutReq> {
    private static readonly pb::MessageParser<FIMLogoutReq> _parser = new pb::MessageParser<FIMLogoutReq>(() => new FIMLogoutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMLogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.FimReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLogoutReq(FIMLogoutReq other) : this() {
      platform_ = other.platform_;
      uID_ = other.uID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMLogoutReq Clone() {
      return new FIMLogoutReq(this);
    }

    /// <summary>Field number for the "Platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 2;
    private string uID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UID {
      get { return uID_; }
      set {
        uID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMLogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMLogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      if (UID != other.UID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (UID.Length != 0) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Platform);
      }
      if (UID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (UID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMLogoutReq other) {
      if (other == null) {
        return;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.UID.Length != 0) {
        UID = other.UID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Platform = input.ReadString();
            break;
          }
          case 18: {
            UID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
