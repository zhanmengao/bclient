// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mid_cli_struct.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Forevernine.Midplat.Proto {

  /// <summary>Holder for reflection information generated from mid_cli_struct.proto</summary>
  public static partial class MidCliStructReflection {

    #region Descriptor
    /// <summary>File descriptor for mid_cli_struct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MidCliStructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRtaWRfY2xpX3N0cnVjdC5wcm90bxIZZm9yZXZlcm5pbmUubWlkcGxhdC5w",
            "cm90bxoKZW51bS5wcm90byJcCglGSU1Nc2dBY2sSNgoFRlR5cGUYASABKA4y",
            "Jy5mb3JldmVybmluZS5taWRwbGF0LnByb3RvLkZPUldBUkRfVFlQRRILCgNT",
            "cmMYAiABKAkSCgoCSUQYAyABKARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Forevernine.Midplat.Proto.EnumReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Forevernine.Midplat.Proto.FIMMsgAck), global::Forevernine.Midplat.Proto.FIMMsgAck.Parser, new[]{ "FType", "Src", "ID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FIMMsgAck : pb::IMessage<FIMMsgAck> {
    private static readonly pb::MessageParser<FIMMsgAck> _parser = new pb::MessageParser<FIMMsgAck>(() => new FIMMsgAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FIMMsgAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Forevernine.Midplat.Proto.MidCliStructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMMsgAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMMsgAck(FIMMsgAck other) : this() {
      fType_ = other.fType_;
      src_ = other.src_;
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIMMsgAck Clone() {
      return new FIMMsgAck(this);
    }

    /// <summary>Field number for the "FType" field.</summary>
    public const int FTypeFieldNumber = 1;
    private global::Forevernine.Midplat.Proto.FORWARD_TYPE fType_ = global::Forevernine.Midplat.Proto.FORWARD_TYPE.Init;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Forevernine.Midplat.Proto.FORWARD_TYPE FType {
      get { return fType_; }
      set {
        fType_ = value;
      }
    }

    /// <summary>Field number for the "Src" field.</summary>
    public const int SrcFieldNumber = 2;
    private string src_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Src {
      get { return src_; }
      set {
        src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 3;
    private ulong iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIMMsgAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIMMsgAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FType != other.FType) return false;
      if (Src != other.Src) return false;
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FType != global::Forevernine.Midplat.Proto.FORWARD_TYPE.Init) hash ^= FType.GetHashCode();
      if (Src.Length != 0) hash ^= Src.GetHashCode();
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FType != global::Forevernine.Midplat.Proto.FORWARD_TYPE.Init) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FType);
      }
      if (Src.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Src);
      }
      if (ID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FType != global::Forevernine.Midplat.Proto.FORWARD_TYPE.Init) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FType);
      }
      if (Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
      }
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIMMsgAck other) {
      if (other == null) {
        return;
      }
      if (other.FType != global::Forevernine.Midplat.Proto.FORWARD_TYPE.Init) {
        FType = other.FType;
      }
      if (other.Src.Length != 0) {
        Src = other.Src;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FType = (global::Forevernine.Midplat.Proto.FORWARD_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            Src = input.ReadString();
            break;
          }
          case 24: {
            ID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
